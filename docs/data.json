{
    "project": {
        "name": "WebWorker",
        "description": "WebWorker: A wrapper for the HTML 5 web worker API.",
        "version": "0.0.1"
    },
    "files": {
        "src/js/web-worker.js": {
            "name": "src/js/web-worker.js",
            "modules": {
                "WebWorker": 1
            },
            "classes": {
                "WebWorker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/js/worker-wrapper.js": {
            "name": "src/js/worker-wrapper.js",
            "modules": {},
            "classes": {
                "Wrapper": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "WebWorker": {
            "name": "WebWorker",
            "submodules": {},
            "classes": {
                "WebWorker": 1,
                "Wrapper": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/js/worker-wrapper.js",
            "line": 34,
            "description": "The WebWorker module."
        }
    },
    "classes": {
        "WebWorker": {
            "name": "WebWorker",
            "shortname": "WebWorker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebWorker",
            "namespace": "",
            "file": "src/js/web-worker.js",
            "line": 44,
            "description": "The main WebWorker class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "opts",
                    "description": "The options to be passed into the constructor.\n           <br />\n           If you pass a `String`, the code will first search\n           for an element selector with the worker script.\n           If it does not find the element it will then use\n           it as a URL to the actual worker script.",
                    "type": "Object|String"
                }
            ]
        },
        "Wrapper": {
            "name": "Wrapper",
            "shortname": "Wrapper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WebWorker",
            "namespace": "",
            "file": "src/js/worker-wrapper.js",
            "line": 34,
            "description": "This documentation is for the worker script _wrapper_. Every user webworker\nscript is wrapped within this shell. All properties and methods described\nhere are attached to the `'self'` object within the worker script.",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "src/js/web-worker.js",
            "line": 61,
            "description": "A jQuery object created from the webworker instance.",
            "itemtype": "property",
            "name": "_$",
            "access": "private",
            "tagname": "",
            "type": "{jQuery}",
            "default": "$(this)",
            "readonly": "",
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 72,
            "description": "The worker URL (if provided)",
            "itemtype": "property",
            "name": "_workerUrl",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "default": "null",
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 81,
            "description": "The `Blob` URL generated for the worker.",
            "itemtype": "property",
            "name": "_workerBlobUrl",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "default": "null",
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 90,
            "description": "The worker script contents (cached for further use).",
            "itemtype": "property",
            "name": "_workerScript",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "default": "null",
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 99,
            "description": "The native browser worker object. This is generated once the worker is loaded.",
            "itemtype": "property",
            "name": "_nativeWorker",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "default": "null",
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 108,
            "description": "Store the last error generated by the worker instance.",
            "itemtype": "property",
            "name": "_lastError",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "default": "null",
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 117,
            "description": "Indicates if the worker script has loaded.\nThis is set to `true` once the worker script has\nsuccessfully loaded after the `.load()` method call.",
            "itemtype": "property",
            "name": "_hasLoaded",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "default": "false",
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 128,
            "description": "Since `WebWorker` terminate calls are asynchronous,\nthis is used to keep track of whether a terminate call\nwas initialized.",
            "itemtype": "property",
            "name": "_isTerminateInitialized",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "default": "false",
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 139,
            "description": "The main constructor calls this method. This method\nwas moved out of the main constructor to keep the\ncode clean.",
            "itemtype": "method",
            "name": "_constructor",
            "params": [
                {
                    "name": "opts",
                    "description": "Arguments to the main constructor",
                    "type": "Object",
                    "multiple": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 193,
            "description": "Returns the worker URL if one was provided during object instantiation.",
            "itemtype": "method",
            "name": "getUrl",
            "return": {
                "description": "The worker URL, `null` otherwise.",
                "type": "String"
            },
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 202,
            "description": "Returns the worker blob URL if one has been generated.",
            "itemtype": "method",
            "name": "getBlobUrl",
            "return": {
                "description": "The worker blob URL, `null` otherwise.",
                "type": "String"
            },
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 211,
            "description": "Returns the native browser worker instance if one has been generated.",
            "itemtype": "method",
            "name": "getNativeWorker",
            "return": {
                "description": "The native worker instance, `null` otherwise.",
                "type": "Object"
            },
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 220,
            "description": "Returns whether the worker script has been loaded.",
            "itemtype": "method",
            "name": "hasLoaded",
            "return": {
                "description": "Returns `true` if the worker script has loaded, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 229,
            "description": "Triggers the instance to load the worker script and generate a native browser worker.",
            "itemtype": "method",
            "name": "load",
            "chainable": 1,
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 285,
            "description": "Generates the native browser worker and attaches the message parser to it.",
            "itemtype": "method",
            "name": "_createWorker",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 301,
            "description": "Assigns the basic internal event handlers to the worker instance.",
            "itemtype": "method",
            "name": "_assignEventHandlers",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 324,
            "description": "Returns whether a worker terminate was initialized.",
            "itemtype": "method",
            "name": "isTerminateInitialized",
            "return": {
                "description": "Returns `true` if a terminate has been initialized, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 333,
            "description": "Start the worker (if it has loaded). Any arguments passed to this method\nwill be passed internally to the worker script.\n<br />\nNote that you should start the worker only AFTER it has loaded. If you call this\nmethod before the worker has loaded it will fail silently.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "args",
                    "description": "Arguments to be passed internally to the worker\n                     script.<br />\n                     Please ensure that arguments are basic\n                     objects that can be cloned by the browser\n                     for `postMessage` interface.",
                    "type": "Mixed",
                    "multiple": true
                }
            ],
            "chainable": 1,
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 363,
            "description": "This method acts as the main communications interface with the worker and is used internally.\n<br /><br />\n**You are recommended to use the trigger interface _ONLY_ as it is the most reliable mode of\ncommunication between the instance and the actual worker.**\n<br /><br />\nIf you do understand the risks, you are welcome to use this method (a reason why it is\nleft public instead of private).\n<br /><br />\nIt's basic usage is very simple. Specify the `action`, which is the\nmethod name to call _inside_ the worker script, and the arguments to pass in. The worker\ndoes the rest of the heavy lifting.\n<br /><br />\nNote: This method is NOT synchronous and will not warn you of any errors.",
            "itemtype": "method",
            "name": "sendMessage",
            "params": [
                {
                    "name": "action",
                    "description": "The name of the method within the worker script to call.",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "The array of arguments to pass to the worker. Ensure that this data\n                    can be cloned by the browser for the `postMessage` interface.",
                    "type": "Array"
                }
            ],
            "chainable": 1,
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 411,
            "description": "Attaches the message parser to the native worker. This allows the worker to hook into\n`postMessage` API and set up a communications protocol between the instance and the\nnative browser worker.",
            "itemtype": "method",
            "name": "_attachMessageParser",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 447,
            "description": "This method triggers the worker to terminate. Terminating is ASYNCHRONOUS. This method\nsets the ball rolling. It sends the message to the worker which may have a\n`terminateHandler` that can do some cleanup operations before control is passed back\nto the instance and the final terminate (`terminateNow`) is executed.",
            "itemtype": "method",
            "name": "terminate",
            "chainable": 1,
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 469,
            "description": "Terminates the worker _immediately_.\n<br />\nThis method can be used to terminate the worker\n_immediately_, instead of waiting for the asynchronous terminate cycle to complete.\n<br />\nIt is also called internally once the asynchronous `terminate` cycle\npasses control back to the instance to execute the final terminate.",
            "itemtype": "method",
            "name": "terminateNow",
            "params": [
                {
                    "name": "returnValue",
                    "description": "This value is passed to with the data on the\n                             WORKER_TERMINATED event. It is also used internally to\n                             pass the return value of the `terminateHandler` from\n                             the worker in the asynchronous terminate cycle.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 505,
            "description": "Used to bind event listeners to the worker. Internally it uses the jQuery `.on` method.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "args",
                    "description": "Lookup the jQuery `.on` API for argument list.",
                    "type": "Mixed",
                    "multiple": true
                }
            ],
            "chainable": 1,
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 517,
            "description": "Used to bind event listeners to the worker for single execution. Internally it uses the jQuery `.one` method.",
            "itemtype": "method",
            "name": "one",
            "params": [
                {
                    "name": "args",
                    "description": "Lookup the jQuery `.one` API for argument list.",
                    "type": "Mixed",
                    "multiple": true
                }
            ],
            "chainable": 1,
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 529,
            "description": "Used to unbind event listeners from the worker. Internally it uses the jQuery `.off` method.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "args",
                    "description": "Lookup the jQuery `.off` API for argument list.",
                    "type": "Mixed",
                    "multiple": true
                }
            ],
            "chainable": 1,
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 545,
            "description": "Used to trigger events on the worker. Internally it uses a combination of the jQuery `.trigger` method\nand a custom trigger for triggering events on the native worker script.\n<br /><br />\nIf an event type is recognized as an internal event type, the trigger is executed on the base instance\nusing jQuery. Otherwise the `.sendMessage` API is used to pass the trigger to the worker script.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "event",
                    "description": "This can be a string `eventType` or an object `event`. Please ensure that if using\n                      object events, that they are clonable by the browser for the `postMessage` API.",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 601,
            "description": "You may want to trigger an event on the base worker instance irrespective of it's event type. Use this\nmethod to achieve the same.",
            "itemtype": "method",
            "name": "triggerSelf",
            "params": [
                {
                    "name": "event",
                    "description": "This can be a string `eventType` or an object `event`.",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 635,
            "description": "Internal method to trigger events on the base worker instance.",
            "itemtype": "method",
            "name": "_triggerSelf",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "args",
                    "description": "Arguments to `trigger`.",
                    "type": "Mixed",
                    "multiple": true
                }
            ],
            "chainable": 1,
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 652,
            "description": "Throw error on the worker instance. This internally triggers the `error` event.\nOptionally you can also make this method throw an exception.\n<br />\nThis method also internally updates the `lastError` value on the instance\nand static properties.",
            "itemtype": "method",
            "name": "throwError",
            "params": [
                {
                    "name": "error",
                    "description": "Error string that describes the error.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data that is to be associated with the error event.",
                    "type": "Mixed",
                    "optional": true
                },
                {
                    "name": "throwException",
                    "description": "Set to `true` if you want to throw an exception in addition to the error event.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 685,
            "description": "Internal method used to trigger the `error` event on the instance.",
            "itemtype": "method",
            "name": "_triggerError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "error",
                    "description": "Error string that describes the error.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data that is to be associated with the error event.",
                    "type": "Mixed",
                    "optional": true
                },
                {
                    "name": "throwException",
                    "description": "Set to `true` if you want to throw an exception in addition to the error event.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 707,
            "description": "Returns the last error that was trigger on this worker instance.",
            "itemtype": "method",
            "name": "getLastError",
            "return": {
                "description": "The last error message that was thrown on this worker instance.",
                "type": "String"
            },
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 719,
            "description": "The last error encountered across all WebWorker instances.",
            "itemtype": "property",
            "name": "_lastError",
            "access": "private",
            "tagname": "",
            "static": 1,
            "type": "{String}",
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 728,
            "description": "List of pre-defined actions for the WebWorker instance.",
            "itemtype": "property",
            "name": "Action",
            "type": "Object",
            "static": 1,
            "class": "WebWorker",
            "module": "WebWorker",
            "subprops": [
                {
                    "name": "START",
                    "description": "'start'",
                    "type": "String"
                },
                {
                    "name": "SET_TERMINATING_STATUS",
                    "description": "'setTerminatingStatus'",
                    "type": "String"
                },
                {
                    "name": "TERMINATE",
                    "description": "'terminate'",
                    "type": "String"
                },
                {
                    "name": "TERMINATE_NOW",
                    "description": "'terminateNow'",
                    "type": "String"
                },
                {
                    "name": "TRIGGER",
                    "description": "'trigger'",
                    "type": "String"
                },
                {
                    "name": "TRIGGER_SELF",
                    "description": "'triggerSelf'",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src/js/web-worker.js",
            "line": 751,
            "description": "List of pre-defined events for the WebWorker instance.",
            "itemtype": "property",
            "name": "Event",
            "type": "Object",
            "static": 1,
            "class": "WebWorker",
            "module": "WebWorker",
            "subprops": [
                {
                    "name": "INITIALIZED",
                    "description": "'webworker:initialized'",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "'webworker:error'",
                    "type": "String"
                },
                {
                    "name": "WORKER_LOADING",
                    "description": "'webworker:worker-loading'",
                    "type": "String"
                },
                {
                    "name": "WORKER_LOADED",
                    "description": "'webworker:worker-loaded'",
                    "type": "String"
                },
                {
                    "name": "WORKER_STARTING",
                    "description": "'webworker:worker-starting'",
                    "type": "String"
                },
                {
                    "name": "WORKER_STARTED",
                    "description": "'webworker:worker-started'",
                    "type": "String"
                },
                {
                    "name": "WORKER_TERMINATING",
                    "description": "'webworker:worker-terminating'",
                    "type": "String"
                },
                {
                    "name": "WORKER_TERMINATED",
                    "description": "'webworker:worker-terminated'",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src/js/web-worker.js",
            "line": 781,
            "description": "Reverse mapping of pre-defined events for faster lookup.",
            "itemtype": "property",
            "name": "EventMap",
            "static": 1,
            "type": "{Object}",
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 796,
            "description": "Pre-defined list of errors for the WebWorker instance.",
            "itemtype": "property",
            "name": "Error",
            "type": "Object",
            "static": 1,
            "class": "WebWorker",
            "module": "WebWorker",
            "subprops": [
                {
                    "name": "UNKNOWN",
                    "description": "\"An unknown error occured.\"",
                    "type": "String"
                },
                {
                    "name": "INVALID_ARGUMENTS",
                    "description": "\"Invalid arguments were supplied to this method.\"",
                    "type": "String"
                },
                {
                    "name": "WORKER_DID_NOT_LOAD",
                    "description": "\"Unable to load worker.\"",
                    "type": "String"
                }
            ]
        },
        {
            "file": "src/js/web-worker.js",
            "line": 826,
            "description": "Retrieves the last error thrown by any WebWorker instance.",
            "itemtype": "method",
            "name": "getLastError",
            "static": 1,
            "return": {
                "description": "The last error string thrown by any WebWorker instance.",
                "type": "String"
            },
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/web-worker.js",
            "line": 834,
            "description": "A jQuery-like method to assign the WebWorker class under a different context and className.\nYou may either provide the context and class name as params\nOR use the return value to set it\nOR both.",
            "itemtype": "method",
            "name": "noConflict",
            "static": 1,
            "params": [
                {
                    "name": "context",
                    "description": "The context to which the WebWorker instance needs to be associated.",
                    "type": "Object"
                },
                {
                    "name": "className",
                    "description": "The class name with which the WebWorker instance will be identified.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The last error string thrown by any WebWorker instance.",
                "type": "String"
            },
            "class": "WebWorker",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 42,
            "description": "Boolean indicating whether the worker (wrapper) script has initialized.",
            "itemtype": "property",
            "name": "hasInitialized",
            "type": "{Boolean}",
            "default": "false",
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 50,
            "description": "Object in which all internal worker listeners are tracked.",
            "itemtype": "property",
            "name": "Listeners",
            "type": "{Object}",
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 58,
            "description": "Boolean indicating if the worker script has been initiated to be terminated.",
            "itemtype": "property",
            "name": "isTerminating",
            "type": "{Boolean}",
            "default": "false",
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 66,
            "description": "Boolean indicating if the worker script has been initiated to be terminated.",
            "itemtype": "property",
            "name": "isTerminating",
            "type": "{Boolean}",
            "default": "null",
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 74,
            "description": "The main worker script that is provided by the user is injected into this function.\nAlso any arguments passed to the {{#crossLink \"Wrapper/start:method\"}}{{/crossLink}} method are passed on to this function.",
            "itemtype": "method",
            "name": "main",
            "chainable": 1,
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 84,
            "description": "This method is called when initializing the worker script.\nIt also triggers the WORKER_LOADED event on the base worker instance.",
            "itemtype": "method",
            "name": "init",
            "chainable": 1,
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 98,
            "description": "This method is called by the base worker instance when it's {{#crossLink \"WebWorker/start:method\"}}{{/crossLink}}\nmethod is invoked. It also gets the arguments from the base worker.\nInternally it calls the {{#crossLink \"Wrapper/main:method\"}}{{/crossLink}} method with arguments.",
            "itemtype": "method",
            "name": "start",
            "chainable": 1,
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 116,
            "description": "This method emulates basic jQuery `.on` event binding behavior.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventType",
                    "description": "The string event type that needs to be bound to.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function that will listen to the event.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 139,
            "description": "This method emulates basic jQuery `.one` event binding behavior.",
            "itemtype": "method",
            "name": "one",
            "params": [
                {
                    "name": "eventType",
                    "description": "The string event type that needs to be bound to.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function that will listen to the event.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 159,
            "description": "This method emulates basic jQuery `.off` event unbinding behavior.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "eventType",
                    "description": "The string event type that needs to be unbound.\n                            If not provided or passed as `null` all event\n                            listeners are unbound.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "listener",
                    "description": "The function that needs to be unbound from the event.\n                             If not provided or passed as `null` then all event\n                             listeners for that particular event type are unbound.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 190,
            "description": "Removes an event listener for a particular event type. Optionally if\nthe listener is not passed or is `null` it removes all listeners for\nthe specified event type.",
            "itemtype": "method",
            "name": "_removeListenerFromEventType",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "eventType",
                    "description": "Event type for which the listener is\n                           being removed.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener that needs to be removed.\n                               If not passed in or passed as `null`\n                               all listeners for the specified event\n                               type are removed.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 223,
            "description": "Trigger events on the base worker instance.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "event",
                    "description": "The event to be triggered. Generally\n                              expected to be a `String` but can\n                              also be an `Object`.",
                    "type": "String|Object"
                },
                {
                    "name": "data",
                    "description": "Optional data to associate with the event.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 261,
            "description": "Trigger events on the thread worker instance.",
            "itemtype": "method",
            "name": "triggerSelf",
            "params": [
                {
                    "name": "event",
                    "description": "The event to be triggered. Generally\n                              expected to be a `String` but can\n                              also be an `Object`.",
                    "type": "String|Object"
                },
                {
                    "name": "data",
                    "description": "Optional data to associate with the event.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 308,
            "description": "This method is used to format messages being sent between the worker\nand the base worker instance. It's usage is similar to the\n{{#crossLink \"WebWorker/sendMessage:method\"}}{{/crossLink}} method\nin the base class.",
            "itemtype": "method",
            "name": "sendMessage",
            "params": [
                {
                    "name": "action",
                    "description": "The name of the method on the base worker instance to call.",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "An array of arguments to pass to the action.",
                    "type": "Array"
                }
            ],
            "chainable": 1,
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 340,
            "description": "Terminates the worker from within the worker script.\nNote that terminates from within the worker are asynchronous.\nThis method calls the\n{{#crossLink \"Wrapper/terminateHandler\"}}{{/crossLink}},\nif it is assigned and is a function, and then goes on to\ncommunicate with the base worker class to call the method\n{{#crossLink \"WebWorker/terminateNow:method\"}}{{/crossLink}}.\n\nThe {{#crossLink \"WebWorker\"}}{{/crossLink}}\nclass does provide a synchronous way to terminate the worker\nbut it is not supported from within the worker script itself.",
            "itemtype": "method",
            "name": "terminate",
            "params": [
                {
                    "name": "terminateNow",
                    "description": "If set to `true` the worker\n                                also does a `self.close()`\n                                after it communicates the\n                                terminate status to the base\n                                worker instance.\n                                It is recommended to use the method\n                                {{#crossLink \"Wrapper/terminateNow:method\"}}{{/crossLink}}\n                                to achieve the same goal as\n                                it gives a more clear semantics\n                                in your code.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 391,
            "description": "Terminates the worker _immediately from within the worker script.\nThis method internally calls the\n{{#crossLink \"Wrapper/terminate:method\"}}{{/crossLink}} method\nto terminate the worker.",
            "itemtype": "method",
            "name": "terminateNow",
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 404,
            "description": "Set the terminating status. Used internally by the wrapper script\nto keep track of the terminating status.",
            "itemtype": "method",
            "name": "setTerminatingStatus",
            "params": [
                {
                    "name": "status",
                    "description": "The status you want to set.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 416,
            "description": "The native worker `close` method is overwritten in the wrapper to\ngive consistent behaviour with the WebWorker class.\nThis method serves as an alias for the native version of the\nmethod to be used internally.",
            "itemtype": "method",
            "name": "_nativeClose",
            "access": "private",
            "tagname": "",
            "class": "Wrapper",
            "module": "WebWorker"
        },
        {
            "file": "src/js/worker-wrapper.js",
            "line": 426,
            "description": "The native `close` method is overwritten to serve as an alias for\n{{#crossLink \"Wrapper/terminate:method\"}}{{/crossLink}}. This\nhas been done to give a consistent behaviour for the script.\nYou are encouraged to use\n{{#crossLink \"Wrapper/terminateNow:method\"}}{{/crossLink}}\nto terminate the script immediately.",
            "itemtype": "method",
            "name": "close",
            "chainable": 1,
            "class": "Wrapper",
            "module": "WebWorker"
        }
    ],
    "warnings": []
}